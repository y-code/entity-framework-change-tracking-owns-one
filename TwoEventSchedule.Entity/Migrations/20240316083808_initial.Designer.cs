// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TwoEventSchedule.Entity;

#nullable disable

namespace TwoEventSchedule.Entity.Migrations
{
    [DbContext(typeof(JobDbContext))]
    [Migration("20240316083808_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TwoEventSchedule.Entity.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("End", "TwoEventSchedule.Entity.Entities.Job.End#Schedule", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset?>("Executed")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("Scheduled")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Start", "TwoEventSchedule.Entity.Entities.Job.Start#Schedule", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset?>("Executed")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("Scheduled")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.ToTable("Job");
                });
#pragma warning restore 612, 618
        }
    }
}
